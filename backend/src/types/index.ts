// Generated by https://quicktype.io
import { Request } from "express";
import { Document, Error, Model } from "mongoose";

// Generated by https://quicktype.io

export interface IUser extends Document {
   _id: string;
   name: string;
   email: string;
   role: Role;
   active: boolean;
   avatar: string;
   password: string;
   passwordConfirm: string;
   passwordChangedAt: string;
   passwordRestToken: string;
   passwordRestExpires: string;
}

export enum Role {
   Admin = "admin",
   Guide = "guide",
   LeadGuide = "lead-guide",
   User = "user",
}

// Generated by https://quicktype.io

export interface IDecoded {
   id: string;
   iat: number;
   exp: number;
}
export interface IRequest extends Request {
   user: Document<unknown, object, IUser> &
      IUser &
      Required<{
         _id: string;
      }>;
}
export interface IUserDocument extends IUser {
   correctPassword: (
      candidatePassword: string,
      userPassword: string,
   ) => Promise<string>;
   changedPasswordAfter: (JWT: number) => boolean;
   createPasswordRestToken: () => string;
}
export type IModel = Model<
   IUserDocument,
   object,
   object,
   object,
   Document<unknown, object, IUserDocument> &
      IUserDocument &
      Required<{
         _id: string;
      }>
>;
export interface IError extends Error {
   name: string;
   code?: number;
   statusCode?: number;
   stringValue?: string;
   kind?: string;
   status?: string;
   path?: string;
   value?: string;
   errmsg?: string;
   isOperational?: boolean;
   errors?: { [path: string]: Error.ValidatorError | Error.CastError };
   addError?: (
      path: string,
      error: Error.ValidatorError | Error.CastError,
   ) => void;
}
